name: Create Issues from Backlog

on:
  push:
    paths:
      - 'backlog/*.md'
    branches:
      - main

permissions:
  issues: write
  contents: read

jobs:
  create-issues:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Issues from Backlog
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const backlogDir = path.join(process.env.GITHUB_WORKSPACE, 'backlog');
            const files = fs.readdirSync(backlogDir)
              .filter(file => file.endsWith('.md'))
              .sort((a, b) => a.localeCompare(b));
            
            const issueMap = new Map();
            
            // 기존 이슈 조회
            const query = `query($owner:String!, $name:String!) {
              repository(owner:$owner, name:$name) {
                issues(first:100, states:OPEN) {
                  nodes {
                    id
                    number
                    title
                    body
                  }
                }
              }
            }`;
            
            const existingIssues = await github.graphql(query, {
              owner: context.repo.owner,
              name: context.repo.repo
            });
            
            const existingIssuesByFile = new Map();
            existingIssues.repository.issues.nodes.forEach(issue => {
              const fileMatch = issue.body.match(/Source: \`([^`]+)\`/);
              if (fileMatch) {
                existingIssuesByFile.set(fileMatch[1], {
                  id: issue.id,
                  number: issue.number
                });
              }
            });
            
            // 메인 태스크 생성
            for (const file of files) {
              if (file.match(/^\d+-\d+-/)) continue;
              
              const filePath = path.join(backlogDir, file);
              const content = fs.readFileSync(filePath, 'utf8');
              
              const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---\n([\s\S]*)$/);
              if (!frontmatterMatch) continue;
              
              const [_, frontmatter, body] = frontmatterMatch;
              const metadata = {};
              frontmatter.split('\n').forEach(line => {
                const [key, ...value] = line.split(':');
                if (key && value) {
                  metadata[key.trim()] = value.join(':').trim();
                }
              });
              
              const title = metadata.title || path.basename(file, '.md');
              const taskNumber = file.match(/^(\d+)-/)?.[1];
              
              // 이미 존재하는 이슈인지 확인
              const existingIssue = existingIssuesByFile.get(file);
              if (existingIssue) {
                issueMap.set(taskNumber, existingIssue.number);
                continue;
              }
              
              // 새 이슈 생성
              const newBody = `${body}\n\nSource: \`${file}\``;
              const createIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: newBody,
                labels: metadata.labels ? metadata.labels.split(',').map(l => l.trim()) : []
              });
              
              if (taskNumber) {
                issueMap.set(taskNumber, createIssue.data.number);
              }
            }
            
            // 서브태스크 생성
            for (const file of files) {
              if (!file.match(/^\d+-\d+-/)) continue;
              
              const filePath = path.join(backlogDir, file);
              const content = fs.readFileSync(filePath, 'utf8');
              
              const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---\n([\s\S]*)$/);
              if (!frontmatterMatch) continue;
              
              const [_, frontmatter, body] = frontmatterMatch;
              const metadata = {};
              frontmatter.split('\n').forEach(line => {
                const [key, ...value] = line.split(':');
                if (key && value) {
                  metadata[key.trim()] = value.join(':').trim();
                }
              });
              
              const title = metadata.title || path.basename(file, '.md');
              const parentTaskNumber = file.match(/^(\d+)-/)?.[1];
              
              // 이미 존재하는 이슈인지 확인
              const existingIssue = existingIssuesByFile.get(file);
              if (existingIssue) continue;
              
              const parentIssueNumber = issueMap.get(parentTaskNumber);
              if (!parentIssueNumber) continue;
              
              // 새 서브이슈 생성
              const newBody = `${body}\n\nSource: \`${file}\`\nParent: #${parentIssueNumber}`;
              const createSubIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: newBody,
                labels: metadata.labels ? metadata.labels.split(',').map(l => l.trim()) : []
              });
              
              // 서브이슈로 설정
              const getIssueIdQuery = `
                query($owner:String!, $repo:String!, $number:Int!) {
                  repository(owner:$owner, name:$repo) {
                    issue(number:$number) {
                      id
                    }
                  }
                }
              `;
              
              try {
                // 부모 이슈 ID 조회
                const parentIssueResult = await github.graphql(getIssueIdQuery, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  number: parentIssueNumber
                });
                
                // 자식 이슈 ID 조회
                const childIssueResult = await github.graphql(getIssueIdQuery, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  number: createSubIssue.data.number
                });

                // REST API를 통해 서브이슈 연결
                await github.rest.issues.addSubissue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parentIssueNumber,
                  sub_issue_id: createSubIssue.data.number
                });
                
              } catch (error) {
                console.log('서브이슈 연결 실패:', error);
                // 실패해도 계속 진행
              }
            }
            
            // 모든 이슈가 생성된 후 백로그 파일 삭제
            for (const file of files) {
              const filePath = path.join(backlogDir, file);
              fs.unlinkSync(filePath);
            }